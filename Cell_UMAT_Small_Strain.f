C     USER SCRIPT CONTAINING SUBROUTINES TO DEFINE CYTOSKELETAL BEHAVIOUR WITH SMALL STRAIN FORMULATION
      SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD,
     1 RPL,DDSDDT,DRPLDE,DRPLDT,
     2 STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,CMNAME,
     3 NDI,NSHR,NTENS,NSTATV,PROPS,NPROPS,COORDS,DROT,PNEWDT,
     4 CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,KSTEP,KINC)

      INCLUDE 'ABA_PARAM.INC'

      CHARACTER*80 CMNAME
      DIMENSION STRESS(NTENS),STATEV(NSTATV),
     1 DDSDDE(NTENS,NTENS),DDSDDT(NTENS),DRPLDE(NTENS),
     2 STRAN(NTENS),DSTRAN(NTENS),TIME(2),PREDEF(1),DPRED(1),
     3 PROPS(NPROPS),COORDS(3),DROT(3,3),DFGRD0(3,3),DFGRD1(3,3)

C     DEFINE NECESSARY VARIABLES   
      REAL(KIND=8) E_PASSIVE,NU,ID_MAT(3,3),K_F,K_B,SIG_MAX,K_T
      REAL(KIND=8) SIGMA_MAT(3,3),DDSDDE_CONS(6,6)
      REAL(KIND=8) C_MAT(6,6),ALAMBDA,AMU
      INTEGER N_FIBRES, I, J 

C     MATERIAL PARAMETERS : PROPS ARE DEFINED IN ABAQUS INP FILE
      E_PASSIVE=PROPS(1)
      NU=PROPS(2)
      SIG_MAX=PROPS(3)
      K_T = PROPS(4)
      K_F = PROPS(5)
      K_B = PROPS(6)

C     NUMBER OF FIBRES IN CYTOPLASM (N_FIBRES)
      N_FIBRES = 20

C     INITIALISE MATRICES

C     ID MATRIX : DEFINE [1,0,0;0,1,0;0,0,1]
      DO I=1,3
        DO J=1,3
          ID_MAT(I,J) = 0.0D0
          SIGMA_MAT(I,J) = 0.0D0
          IF (I .EQ. J) THEN
            ID_MAT(I,J) = 1.0D0
          END IF
        END DO
      END DO


C     STATEV : SET STATEV TO 0 AT T=0      
      IF (TIME(1) .EQ. 0.0) THEN
         DO I=1,NSTATV
            STATEV(I) = 0.0D0
         END DO
      END IF

C     C_MAT : INITIALISE TO 0.0
      DO I=1,6
        DO J=1,6
            C_MAT(I,J) = 0.0D0
        END DO
      END DO

C     CONVERTING YOUNGS MODULUS (E) AND POISSON RATIO (NU) TO LAME CONSTANTS (ALAMBDA,AMU)
      ALAMBDA = E_PASSIVE*NU/((1.0D0+NU)*(1.0D0-2.0D0*NU))
      AMU = E_PASSIVE/(2.0D0*(1.0D0+NU))

C     C_MAT : STIFFNESS MATRIX FOR A 3D ELASTIC MATERIAL IN TERMS OF LAME CONSTANTS
      C_MAT(1,1) = 2.0D0*AMU + ALAMBDA
      C_MAT(1,2) = ALAMBDA
      C_MAT(1,3) = ALAMBDA
      C_MAT(2,1) = ALAMBDA
      C_MAT(2,2) = 2.0D0*AMU + ALAMBDA
      C_MAT(2,3) = ALAMBDA
      C_MAT(3,1) = ALAMBDA
      C_MAT(3,2) = ALAMBDA
      C_MAT(3,3) = 2.0D0*AMU + ALAMBDA
      C_MAT(4,4) = AMU
      C_MAT(5,5) = AMU
      C_MAT(6,6) = AMU

C     EVALUATE TOTAL STRESS IN THE CELL : ACTIVE_STRESS + PASSIVE_STRESS
C     EVAL SIGMA: SUBROUTINE THAT TAKES MATERIAL PARAMETERS AND STATE VARIABLES AS
C     INPUT AND GIVES CURRENT VALUE OF TOTAL STRESS AS OUTPUT.        
      CALL EVAL_SIGMA(E_PASSIVE,NU,ID_MAT,N_FIBRES,STATEV,NSTATV,
     1     DSTRAN,DTIME,DROT,K_F,K_B,SIG_MAX,K_T,C_MAT,SIGMA_MAT)

C     RETURN EVALUATED TOTAL STRESS TO ABAQUS
      STRESS(1) = SIGMA_MAT(1,1)
      STRESS(2) = SIGMA_MAT(2,2)
      STRESS(3) = SIGMA_MAT(3,3)
      STRESS(4) = SIGMA_MAT(1,2)
      STRESS(5) = SIGMA_MAT(1,3)
      STRESS(6) = SIGMA_MAT(2,3)
      
C     RETURN DDSDDE MATRIX TO ABAQUS
C     THIS IS THE JACOBIAN MATRIX NEEDED BY ABAQUS FOR N-R CONVERGENCE. 
C     HERE ASSUMPTION IS THAT DDSDDE = C_MAT TO GET FASTER CONVERGENCE. 
      DDSDDE = C_MAT

      RETURN
      END SUBROUTINE

C     DEFINITION OF SUBROUTINES CALLED IN UMAT SUBROUTINE

C     EVAL_SIGMA : TOTAL STRESS EVALUATION SUBROUTINE
      SUBROUTINE EVAL_SIGMA(E_PASSIVE,NU,ID_MAT,N_FIBRES,STATEV,
     1           NSTATV,DSTRAN,DTIME,DROT,K_F,K_B,SIG_MAX,K_T,
     2           C_MAT,SIGMA_MAT)

      IMPLICIT NONE
      INTEGER N_FIBRES, I, J, NSTATV
      REAL(KIND=8) SIGMA_MAT(3,3),SIGMA_ACTIVE_MAT(3,3)
      REAL(KIND=8) SIGMA_PASSIVE_MAT(3,3)
      REAL(KIND=8) DSTRAN(6),E_PASSIVE,NU,ID_MAT(3,3),STATEV(NSTATV)
      REAL(KIND=8) DTIME,K_F,K_B,SIG_MAX,K_T,C_MAT(6,6),DROT(3,3)

C     INITIALISE PASSIVE AND ACTIVE STRESS MATRICES     
      DO I=1,3
        DO J=1,3
          SIGMA_PASSIVE_MAT(I,J) = 0.0D0
          SIGMA_ACTIVE_MAT(I,J) = 0.00D0
        END DO
      END DO

C     EVAL_SIGMA_PASSIVE_ELASTIC : SUBROUTINE TO EVALUATE PASSIVE STRESS
C     INPUT : MATERIAL PARAMETERS AND STATE VARIABLES
C     OUTPUT : PASSIVE STRESS MATRIX
      CALL EVAL_SIGMA_PASSIVE_ELASTIC(E_PASSIVE,NU,DSTRAN,N_FIBRES,
     1                       STATEV,NSTATV,C_MAT,SIGMA_PASSIVE_MAT)

C     EVAL_SIGMA_ACTIVE : SUBROUTINE TO EVALUATE ACTIVE STRESS
C     INPUT : MATERIAL PARAMETERS AND STATE VARIABLES
C     OUTPUT : ACTIVE STRESS MATRIX
      CALL EVAL_SIGMA_ACTIVE(N_FIBRES,STATEV,NSTATV,DSTRAN,
     1                       DTIME, DROT, K_F,K_B,SIG_MAX,K_T,
     2                       SIGMA_ACTIVE_MAT)

C     TOTAL STRESS = ACTIVE_STRESS + PASSIVE_STRESS
      SIGMA_MAT = SIGMA_PASSIVE_MAT + SIGMA_ACTIVE_MAT

      RETURN
      END SUBROUTINE

C     DEFINITION OF PASSIVE STRESS EVALUATION SUBROUTINE
      SUBROUTINE EVAL_SIGMA_PASSIVE_ELASTIC(E_PASSIVE,NU,DSTRAN,
     1           N_FIBRES,STATEV,NSTATV,C_MAT,SIGMA_PASSIVE_MAT)
      
      IMPLICIT NONE  
      INTEGER N_FIBRES,I,J, NSTATV
      REAL(KIND=8) E_PASSIVE, NU, C_MAT(6,6), STATEV(NSTATV)
      REAL(KIND=8) SIGMA_PASSIVE_VEC(6), DSTRAN(6)
      REAL(KIND=8) SIGMA_PASSIVE_MAT(3,3), AMU, ALAMBDA

C     PASSIVE STRESS FROM PREVIOUS TIME STEP
      SIGMA_PASSIVE_VEC(1) = STATEV(2*N_FIBRES+1)
      SIGMA_PASSIVE_VEC(2) = STATEV(2*N_FIBRES+2)
      SIGMA_PASSIVE_VEC(3) = STATEV(2*N_FIBRES+3)
      SIGMA_PASSIVE_VEC(4) = STATEV(2*N_FIBRES+4)
      SIGMA_PASSIVE_VEC(5) = STATEV(2*N_FIBRES+5)
      SIGMA_PASSIVE_VEC(6) = STATEV(2*N_FIBRES+6)


C     UPDATE PASSIVE STRESS AS PASSIVE_STRESS = PASSIVE_STRESS + C*DELTA_EPSILON
      DO I=1,6
        DO J=1,6
          SIGMA_PASSIVE_VEC(I) = SIGMA_PASSIVE_VEC(I) + 
     1       C_MAT(I,J)*DSTRAN(J)
        END DO
      END DO

C     UPDATE STATEV WITH THE UPDATED PASSIVE STRESS
      STATEV(2*N_FIBRES+1) = SIGMA_PASSIVE_VEC(1)
      STATEV(2*N_FIBRES+2) = SIGMA_PASSIVE_VEC(2)
      STATEV(2*N_FIBRES+3) = SIGMA_PASSIVE_VEC(3)
      STATEV(2*N_FIBRES+4) = SIGMA_PASSIVE_VEC(4)
      STATEV(2*N_FIBRES+5) = SIGMA_PASSIVE_VEC(5)
      STATEV(2*N_FIBRES+6) = SIGMA_PASSIVE_VEC(6)

C     REWRITE PASSIVE STRESS VECTOR IN THE FORM OF A MATRIX
      SIGMA_PASSIVE_MAT(1,1) = SIGMA_PASSIVE_VEC(1)
      SIGMA_PASSIVE_MAT(2,2) = SIGMA_PASSIVE_VEC(2)
      SIGMA_PASSIVE_MAT(3,3) = SIGMA_PASSIVE_VEC(3)
      SIGMA_PASSIVE_MAT(1,2) = SIGMA_PASSIVE_VEC(4)
      SIGMA_PASSIVE_MAT(1,3) = SIGMA_PASSIVE_VEC(5)
      SIGMA_PASSIVE_MAT(2,3) = SIGMA_PASSIVE_VEC(6)
      SIGMA_PASSIVE_MAT(2,1) = SIGMA_PASSIVE_MAT(1,2)
      SIGMA_PASSIVE_MAT(3,1) = SIGMA_PASSIVE_MAT(1,3)
      SIGMA_PASSIVE_MAT(3,2) = SIGMA_PASSIVE_MAT(2,3)

      RETURN
      END SUBROUTINE

C     DEFINITION OF ACTIVE STRESS EVALUATION SUBROUTINE
      SUBROUTINE EVAL_SIGMA_ACTIVE(N_FIBRES,STATEV,NSTATV,DSTRAN,
     1           DTIME, DROT, K_F,K_B,SIG_MAX,K_T,SIGMA_ACTIVE_MAT)                           

      IMPLICIT NONE
      INTEGER N_FIBRES, NSTATV
      REAL(KIND=8) SIGMA_ACTIVE_MAT(3,3),DTIME,K_F,K_B,SIG_MAX
      REAL(KIND=8) STATEV(NSTATV),K_T,DROT(3,3)
      REAL(KIND=8) DPHI,DOMEGA,PHI_VEC(N_FIBRES),OMEGA_VEC(N_FIBRES)
      REAL(KIND=8) SIGMA_ACTIVE_THETA_OLD(N_FIBRES)
      REAL(KIND=8) EPSDOT_MAT(3,3)
      REAL(KIND=8) M_VEC(3),EPSDOT_THETA(N_FIBRES)
      REAL(KIND=8) ETA_SF_THETA(N_FIBRES),SIGMA_ACTIVE_THETA(N_FIBRES)
      REAL(KIND=8) EPSDOT_VEC(6),DSTRAN(6)
      REAL(KIND=8) PI
      INTEGER N_FIBRES_EFF,I,J
      
      PI=4.D0*ATAN(1.D0)

C     DISTRIBUTION OF FIBRES IN THE SPHERE 
      DPHI = 2.0D0*PI/(N_FIBRES)
      DOMEGA = PI/N_FIBRES

      DO I=1,N_FIBRES
        PHI_VEC(I) = 0.0D0 + (2.0D0*PI/(N_FIBRES-1))*(I-1)
        OMEGA_VEC(I) = 0.0D0 + (PI/(N_FIBRES-1))*(I-1)
      END DO

C     INITIALISE ACTIVE STRESS MATRIX(NEEDED FOR NUMERICAL INTEGRATION)
      DO I=1,3
        DO J=1,3
          EPSDOT_MAT(I,J) = 0.0D0
          SIGMA_ACTIVE_MAT(I,J) = 0.0D0
        END DO
      END DO

C     ACTIVE STRESS FROM THE PREVIOUS TIME STEP      
      DO I=1, N_FIBRES
        SIGMA_ACTIVE_THETA_OLD(I) = STATEV(N_FIBRES+I)
      END DO

C     EVALUATE STRAIN_RATE = DELTA_EPSILON/DELTA_T
      EPSDOT_VEC(1) = DSTRAN(1)/DTIME
      EPSDOT_VEC(2) = DSTRAN(2)/DTIME
      EPSDOT_VEC(3) = DSTRAN(3)/DTIME
      EPSDOT_VEC(4) = DSTRAN(4)/DTIME
      EPSDOT_VEC(5) = DSTRAN(5)/DTIME
      EPSDOT_VEC(6) = DSTRAN(6)/DTIME  

C     REWRITE STRAIN RATE VECTOR IN THE FORM OF A MATRIX
      EPSDOT_MAT(1,1) = EPSDOT_VEC(1)
      EPSDOT_MAT(2,2) = EPSDOT_VEC(2)
      EPSDOT_MAT(3,3) = EPSDOT_VEC(3)
      EPSDOT_MAT(1,2) = (1.0/2.0)*EPSDOT_VEC(4)
      EPSDOT_MAT(1,3) = (1.0/2.0)*EPSDOT_VEC(5)
      EPSDOT_MAT(2,3) = (1.0/2.0)*EPSDOT_VEC(6)
      EPSDOT_MAT(2,1) = EPSDOT_MAT(1,2)
      EPSDOT_MAT(3,1) = EPSDOT_MAT(1,3)
      EPSDOT_MAT(3,2) = EPSDOT_MAT(2,3)

C     EVALUATE STRAIN RATE IN EACH FIBRE FROM STRAIN RATE MATRIX
      DO I=1,N_FIBRES
            M_VEC(1) = SIN(OMEGA_VEC(I)*COS(PHI_VEC(I)))
            M_VEC(2) = SIN(OMEGA_VEC(I)*SIN(PHI_VEC(I)))
            M_VEC(3) = COS(OMEGA_VEC(I))

        EPSDOT_THETA(I) = EPSDOT_MAT(1,1)*M_VEC(1)*M_VEC(1)
     1                  + EPSDOT_MAT(2,2)*M_VEC(2)*M_VEC(2)
     2                  + EPSDOT_MAT(3,2)*M_VEC(3)*M_VEC(3)
     3                  + EPSDOT_MAT(1,2)*M_VEC(1)*M_VEC(2)
     4                  + EPSDOT_MAT(1,3)*M_VEC(1)*M_VEC(3)
     5                  + EPSDOT_MAT(2,3)*M_VEC(2)*M_VEC(3)
     6                  + EPSDOT_MAT(2,1)*M_VEC(2)*M_VEC(1)
     7                  + EPSDOT_MAT(3,1)*M_VEC(3)*M_VEC(1)
     8                  + EPSDOT_MAT(3,2)*M_VEC(3)*M_VEC(2)

      END DO

C     EVALUATE STRESS FIBRE CONCENTRATION IN EACH FIBRE
      CALL EVAL_ETA_SF_THETA(K_F,K_B,SIG_MAX,N_FIBRES,DTIME,NSTATV,
     1            STATEV,SIGMA_ACTIVE_THETA_OLD, ETA_SF_THETA)

C     UPDATE STATEV WITH UPDATED STRESS FIBRE CONCENTRATION IN EACH FIBRE
      DO I=1,N_FIBRES
            STATEV(I) = ETA_SF_THETA(I)
      END DO
      
C     CALL SUBROUTINE TO EVALUATE ACTIVE STRESS IN EACH FIBRE
      CALL EVAL_ACTIVE_STRESS_THETA(K_T,SIG_MAX,N_FIBRES,STATEV,
     1     NSTATV,EPSDOT_THETA,SIGMA_ACTIVE_THETA)

C     UPDATE STATEV WITH UPDATED ACTIVE STRESS IN EACH FIBRE
      DO I=1,N_FIBRES
            STATEV(N_FIBRES + I) = SIGMA_ACTIVE_THETA(I)
      END DO

C     INTEGRATION OF ACTIVE STRESS IN EACH FIBRE TO EVALUATE HOMOGENISED ACTIVE STRESS MATRIX
      DO I=1,N_FIBRES
        DO J=1,N_FIBRES
          M_VEC(1) = SIN(OMEGA_VEC(J)*COS(PHI_VEC(I)))
          M_VEC(2) = SIN(OMEGA_VEC(J)*SIN(PHI_VEC(I)))
          M_VEC(3) = COS(OMEGA_VEC(J))

          SIGMA_ACTIVE_MAT(1,1) = SIGMA_ACTIVE_MAT(1,1) + 
     1                            SIGMA_ACTIVE_THETA(J)
     2     *M_VEC(1)*M_VEC(1)*SIN(OMEGA_VEC(J))*DPHI*DOMEGA
          SIGMA_ACTIVE_MAT(2,2) = SIGMA_ACTIVE_MAT(2,2) + 
     1                             SIGMA_ACTIVE_THETA(J)  
     2     *M_VEC(2)*M_VEC(2)*SIN(OMEGA_VEC(J))*DPHI*DOMEGA
          SIGMA_ACTIVE_MAT(3,3) = SIGMA_ACTIVE_MAT(3,3) + 
     1                            SIGMA_ACTIVE_THETA(J)
     2     *M_VEC(3)*M_VEC(3)*SIN(OMEGA_VEC(J))*DPHI*DOMEGA
          SIGMA_ACTIVE_MAT(1,2) = SIGMA_ACTIVE_MAT(1,2) + 
     1                            SIGMA_ACTIVE_THETA(J)
     2     *M_VEC(1)*M_VEC(2)*SIN(OMEGA_VEC(J))*DPHI*DOMEGA
          SIGMA_ACTIVE_MAT(1,3) = SIGMA_ACTIVE_MAT(1,3) + 
     1                            SIGMA_ACTIVE_THETA(J)
     2     *M_VEC(1)*M_VEC(3)*SIN(OMEGA_VEC(J))*DPHI*DOMEGA
          SIGMA_ACTIVE_MAT(2,3) = SIGMA_ACTIVE_MAT(2,3) + 
     1                            SIGMA_ACTIVE_THETA(J)
     2     *M_VEC(2)*M_VEC(3)*SIN(OMEGA_VEC(J))*DPHI*DOMEGA
        END DO
      END DO

      SIGMA_ACTIVE_MAT(2,1) = SIGMA_ACTIVE_MAT(1,2)
      SIGMA_ACTIVE_MAT(3,1) = SIGMA_ACTIVE_MAT(1,3)
      SIGMA_ACTIVE_MAT(3,2) = SIGMA_ACTIVE_MAT(2,3)

      RETURN
      END SUBROUTINE

C     DEFITION OF EVALUATUION OF STRESS FIBRE CONCENTRATION IN EACH FIBRE SUBROUTINE
      SUBROUTINE EVAL_ETA_SF_THETA(K_F,K_B,SIG_MAX,N_FIBRES,DTIME,
     1           NSTATV,STATEV,SIGMA_ACTIVE_THETA_OLD, ETA_SF_THETA)

      IMPLICIT NONE
      INTEGER N_FIBRES,I,J, NSTATV
      REAL(KIND=8) ATHETA, CAL_CONC, SIGMA_BAR_THETA, SIG_MAX, DTIME
      REAL(KIND=8) ETA_SF_THETA(N_FIBRES),K_F, K_F_BAR, K_B, K_B_BAR
      REAL(KIND=8) SIGMA_ACTIVE_THETA_OLD(N_FIBRES)
      REAL(KIND=8) STATEV(NSTATV)

C     STRESS FIBRE CONCENTRATION IN EACH FIBRE OBTAINED BY FORWARD EULER INTEGRATION
      ATHETA = 10000.0D0
      K_F_BAR = K_F/ATHETA
      K_B_BAR = K_B/ATHETA

      DO I = 1, N_FIBRES
        ETA_SF_THETA(I) = STATEV(I)
        CAL_CONC = 0.01D0

          IF ( ETA_SF_THETA(I) .EQ. 0.0) THEN
            SIGMA_BAR_THETA = 0.0D0
          ELSE
            SIGMA_BAR_THETA = SIGMA_ACTIVE_THETA_OLD(I)/
     1                        (ETA_SF_THETA(I)*SIG_MAX)
            IF (SIGMA_BAR_THETA .gt. 1.0) THEN
              SIGMA_BAR_THETA = 1.0D0
            END IF
          END IF

        ETA_SF_THETA(I) = ETA_SF_THETA(I) + DTIME*( 
     1              (1.0D0 - ETA_SF_THETA(I))*CAL_CONC*K_F_BAR -
     2              (1.0D0 - SIGMA_BAR_THETA)*ETA_SF_THETA(I)*K_B_BAR)

      END DO

      RETURN
      END SUBROUTINE EVAL_ETA_SF_THETA

C     DEFITION OF EVALUATUION OF ACTIVE STRESS IN EACH FIBRE SUBROUTINE
      SUBROUTINE EVAL_ACTIVE_STRESS_THETA(K_T,SIG_MAX,N_FIBRES,STATEV,
     1           NSTATV,EPSDOT_THETA,SIGMA_ACTIVE_THETA)

      IMPLICIT NONE
      INTEGER N_FIBRES,I, NSTATV
      REAL(KIND=8) ETA_SF_THETA_I, SIG_MAX, K_T
      REAL(KIND=8) SIGMA_ACTIVE_THETA(N_FIBRES),EPSDOT_THETA(N_FIBRES)
      REAL(KIND=8) STATEV(NSTATV)

C     EVALUATE ACTIVE STRESS IN EACH FIBRE
      DO I = 1, N_FIBRES
        ETA_SF_THETA_I = STATEV(I)
        SIGMA_ACTIVE_THETA(I) = ETA_SF_THETA_I*SIG_MAX*( 1.0D0 + 
     1                          (K_T*EPSDOT_THETA(I)/
     2           SQRT(1.0D0 + EPSDOT_THETA(I)*EPSDOT_THETA(I))) )

      END DO

      RETURN
      END SUBROUTINE EVAL_ACTIVE_STRESS_THETA

C     INCLUDE AMPLITUDE SUBROUTINE
      INCLUDE "UAMP.f"